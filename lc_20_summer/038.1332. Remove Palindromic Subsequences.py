"""
038.1332. Remove Palindromic Subsequences

删除回文子序列

Given a string s consisting only of letters 'a' and 'b'. 
In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, 
if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward 
 well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'


"""


def palindrome(s):
    return len(s) < 2 or s[0] == s[-1] and palindrome(s[1:-1])

    return if word == word[::-1]

def ispalidrome(s):
    if len(s) == 1 or len(s) == 0:
        return True
    else:
        if s[0] == s[-1]:
            ispalidrome(s[1:-1])
        else:
            return False


def findPalindromeSub(self, s: str) -> str:
        a = 0
        b = len(s) - 1
        while a <= b:
            if s[a] != s[b]:
                return False
            a += 1
            b -= 1
        return True


def isPalindrome(str): 
    # Run loop from 0 to len/2  
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False
    return True


def isPalindrome(s): 
    # Using predefined function to  
    # reverse to string print(s) 
    rev = ''.join(reversed(s)) 
  
    # Checking if both string are  
    # equal or not 
    if (s == rev): 
        return True
    return False

def isPalindrome(s): 
	x = "malayalam"
	w = "" 
	for i in x: 
	    w = i + w 
    return True if x == w else False
        

def palin(string):
	strlen = len(string) - 1
	for item in range(len(string) / 2):
		if string[item] != string[strlen]:
			return False
		else:
			strlen = strlen - 1
	return True



def ispalindrome(word):
    if len(word) < 2: return True
    if word[0] != word[-1]: return False
    return ispalindrome(word[1:-1])



def removePalindromeSub(self, s: str) -> int:
    if s == '': return 0 #if not s:
    elif s == s[::-1]: return 1  # 如果字符串是回文，直接全部删除即可。
    else: return 2  # 如果字符串不是回文，我们最多需要删两次

	return s == s[:: -1] and 1 or 2 if s else 0

	if s == '':
            return 0
    return 1 if s == s[::-1] else 2

    return 2 - (s == s[::-1]) - (s == "")

def removePalindromeSub(self, s: str) -> int:
    def ispalidrome(s):
        if len(s) == 1 or len(s) == 0:
            return True
        else:
            if s[0] == s[-1]:
                return ispalidrome(s[1:-1])
            else:
                return False
    if len(s) == 0:
        return 0
    if ispalidrome(s) or s.count("a") == len(s) or s.count("b") == len(s):
        return 1
    #else:
    return 2


def removePalindromeSub(self, s):
    l = 0
    h = len(s) - 1
    while l < h:
        if s[l] != s[h]:
            return 2
        else:
            l += 1
            h -= 1
    return 0 if s == "" else 1






















